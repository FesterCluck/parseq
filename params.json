{"google":"","body":"Designed to be as simple as possible, but no simpler. \r\n\r\n# INSTALL\r\n*not setup yet*\r\n```bash\r\n$ npm install parseq\r\n```\r\n\r\n# MANUAL\r\n\r\n## Require\r\n```javascript\r\nvar par = require(\"parseq\").par;\r\nvar seq = require(\"parseq\").seq;\r\n```\r\n\r\nor the shorthand (but it places \"par\" and \"seq\" in the global scope, and will make jshint unhappy).\r\n\r\n```javascript\r\nrequire(\"parseq\")();\r\n```\r\n\r\n## Sequencial flow\r\nCalls each function sequentially.  Either the return value is passed as the second parameter to the next function, or\r\nuse \"this\" to get the result of an asynchronous call\r\n\r\n```javascript\r\nseq(\r\n  function f1() {\r\n    fs.readfile(\"file1\", this);\r\n  }, function f2(err, value) {\r\n    return \"from f2\";\r\n  }, function done(err, value) {\r\n    ...\r\n  }\r\n);\r\n```\r\n\r\nf2 is called with its value parameter containing the content of file1 (or err contains the error returned by readfile)\r\n\r\ndone is called with value = \"from f2\"\r\n\r\n## Parallel flow\r\n\r\nRuns the n-1 first functions given to par in parallel, and will call the last function when all others have completed.\r\n\r\n```javascript\r\npar(\r\n  function() {\r\n    fs.readFile(\"file1\", this);\r\n  },\r\n  function() {\r\n    fs.readFile(\"file2\", this);\r\n  },\r\n  function done(err, results) {\r\n    ...\r\n  }\r\n);\r\n```\r\nIn done, results[0] contains the content of file1, results[1] contains the content of file1.\r\n\r\nerr contains the first encountered err if any\r\n\r\n## Dynamic number of Parallel flow\r\n\r\nUse \"this()\" as the callback instead of just \"this\".\r\n\r\n```javascript\r\npar(\r\n  function() {\r\n    for (var i = 0; i < 5; i++) {\r\n      fs.readFile(\"file\" + i, this());\r\n    }\r\n  },\r\n  function done(err, results) {\r\n    ...\r\n  }\r\n);\r\n```\r\nresults[0-4] contains the content of file[0-4]\r\n\r\nerr contains the first encountered err if any\r\n\r\n\r\n# TESTING\r\nReally just a very verbose example, more tests coming up\r\n```bash\r\nnode testparseq.js\r\n```\r\n\r\nLicense\r\n=======\r\nparseq.js is freely distributable under the terms of the MIT license.\r\n\r\nCopyright (c) 2012 Sutoiku, Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\r\npersons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\nSoftware.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"a simple javascript flow control library","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"parseq.js"}